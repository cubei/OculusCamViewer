/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/lars/OculusCamViewer_new/src/oculus_stuff/oculus_msgs/msg/HMDInfo.msg
 *
 */


#ifndef OCULUS_MSGS_MESSAGE_HMDINFO_H
#define OCULUS_MSGS_MESSAGE_HMDINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace oculus_msgs
{
template <class ContainerAllocator>
struct HMDInfo_
{
  typedef HMDInfo_<ContainerAllocator> Type;

  HMDInfo_()
    : header()
    , display_device_name()
    , product_name()
    , manufacturer()
    , version(0)
    , horizontal_resolution(0)
    , vertical_resolution(0)
    , horizontal_screen_size(0.0)
    , vertical_screen_size(0.0)
    , vertical_screen_center(0.0)
    , eye_to_screen_distance(0.0)
    , lens_separation_distance(0.0)
    , interpupillary_distance(0.0)
    , desktop_x(0)
    , desktop_y(0)
    , display_id(0)
    , distortion_K()  {
    }
  HMDInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , display_device_name(_alloc)
    , product_name(_alloc)
    , manufacturer(_alloc)
    , version(0)
    , horizontal_resolution(0)
    , vertical_resolution(0)
    , horizontal_screen_size(0.0)
    , vertical_screen_size(0.0)
    , vertical_screen_center(0.0)
    , eye_to_screen_distance(0.0)
    , lens_separation_distance(0.0)
    , interpupillary_distance(0.0)
    , desktop_x(0)
    , desktop_y(0)
    , display_id(0)
    , distortion_K(_alloc)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _display_device_name_type;
  _display_device_name_type display_device_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _product_name_type;
  _product_name_type product_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _manufacturer_type;
  _manufacturer_type manufacturer;

   typedef uint32_t _version_type;
  _version_type version;

   typedef uint32_t _horizontal_resolution_type;
  _horizontal_resolution_type horizontal_resolution;

   typedef uint32_t _vertical_resolution_type;
  _vertical_resolution_type vertical_resolution;

   typedef float _horizontal_screen_size_type;
  _horizontal_screen_size_type horizontal_screen_size;

   typedef float _vertical_screen_size_type;
  _vertical_screen_size_type vertical_screen_size;

   typedef float _vertical_screen_center_type;
  _vertical_screen_center_type vertical_screen_center;

   typedef float _eye_to_screen_distance_type;
  _eye_to_screen_distance_type eye_to_screen_distance;

   typedef float _lens_separation_distance_type;
  _lens_separation_distance_type lens_separation_distance;

   typedef float _interpupillary_distance_type;
  _interpupillary_distance_type interpupillary_distance;

   typedef int32_t _desktop_x_type;
  _desktop_x_type desktop_x;

   typedef int32_t _desktop_y_type;
  _desktop_y_type desktop_y;

   typedef int32_t _display_id_type;
  _display_id_type display_id;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _distortion_K_type;
  _distortion_K_type distortion_K;




  typedef boost::shared_ptr< ::oculus_msgs::HMDInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::oculus_msgs::HMDInfo_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct HMDInfo_

typedef ::oculus_msgs::HMDInfo_<std::allocator<void> > HMDInfo;

typedef boost::shared_ptr< ::oculus_msgs::HMDInfo > HMDInfoPtr;
typedef boost::shared_ptr< ::oculus_msgs::HMDInfo const> HMDInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::oculus_msgs::HMDInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::oculus_msgs::HMDInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace oculus_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg'], 'oculus_msgs': ['/home/lars/OculusCamViewer_new/src/oculus_stuff/oculus_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::oculus_msgs::HMDInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::oculus_msgs::HMDInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::oculus_msgs::HMDInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::oculus_msgs::HMDInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::oculus_msgs::HMDInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::oculus_msgs::HMDInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::oculus_msgs::HMDInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9fd415a6483b21473bf35e7a4b8c2302";
  }

  static const char* value(const ::oculus_msgs::HMDInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9fd415a6483b2147ULL;
  static const uint64_t static_value2 = 0x3bf35e7a4b8c2302ULL;
};

template<class ContainerAllocator>
struct DataType< ::oculus_msgs::HMDInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "oculus_msgs/HMDInfo";
  }

  static const char* value(const ::oculus_msgs::HMDInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::oculus_msgs::HMDInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
string display_device_name\n\
string product_name\n\
string manufacturer\n\
uint32 version\n\
uint32 horizontal_resolution\n\
uint32 vertical_resolution\n\
float32 horizontal_screen_size\n\
float32 vertical_screen_size\n\
float32 vertical_screen_center\n\
float32 eye_to_screen_distance\n\
float32 lens_separation_distance\n\
float32 interpupillary_distance\n\
int32 desktop_x\n\
int32 desktop_y\n\
int32 display_id\n\
float32[] distortion_K\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::oculus_msgs::HMDInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::oculus_msgs::HMDInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.display_device_name);
      stream.next(m.product_name);
      stream.next(m.manufacturer);
      stream.next(m.version);
      stream.next(m.horizontal_resolution);
      stream.next(m.vertical_resolution);
      stream.next(m.horizontal_screen_size);
      stream.next(m.vertical_screen_size);
      stream.next(m.vertical_screen_center);
      stream.next(m.eye_to_screen_distance);
      stream.next(m.lens_separation_distance);
      stream.next(m.interpupillary_distance);
      stream.next(m.desktop_x);
      stream.next(m.desktop_y);
      stream.next(m.display_id);
      stream.next(m.distortion_K);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct HMDInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::oculus_msgs::HMDInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::oculus_msgs::HMDInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "display_device_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.display_device_name);
    s << indent << "product_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.product_name);
    s << indent << "manufacturer: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.manufacturer);
    s << indent << "version: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.version);
    s << indent << "horizontal_resolution: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.horizontal_resolution);
    s << indent << "vertical_resolution: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.vertical_resolution);
    s << indent << "horizontal_screen_size: ";
    Printer<float>::stream(s, indent + "  ", v.horizontal_screen_size);
    s << indent << "vertical_screen_size: ";
    Printer<float>::stream(s, indent + "  ", v.vertical_screen_size);
    s << indent << "vertical_screen_center: ";
    Printer<float>::stream(s, indent + "  ", v.vertical_screen_center);
    s << indent << "eye_to_screen_distance: ";
    Printer<float>::stream(s, indent + "  ", v.eye_to_screen_distance);
    s << indent << "lens_separation_distance: ";
    Printer<float>::stream(s, indent + "  ", v.lens_separation_distance);
    s << indent << "interpupillary_distance: ";
    Printer<float>::stream(s, indent + "  ", v.interpupillary_distance);
    s << indent << "desktop_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.desktop_x);
    s << indent << "desktop_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.desktop_y);
    s << indent << "display_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.display_id);
    s << indent << "distortion_K[]" << std::endl;
    for (size_t i = 0; i < v.distortion_K.size(); ++i)
    {
      s << indent << "  distortion_K[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.distortion_K[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OCULUS_MSGS_MESSAGE_HMDINFO_H
